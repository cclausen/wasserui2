openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8081
  description: Generated server url
paths:
  /api/presences/stop:
    post:
      tags:
      - presence-controller
      operationId: stopPresenceByUser
      parameters:
      - name: personId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/presences/stopHere:
    post:
      tags:
      - presence-controller
      operationId: stopPresenceByUser_1
      parameters:
      - name: personId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: placeId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/presences/stopById:
    post:
      tags:
      - presence-controller
      operationId: stopPresence
      parameters:
      - name: presenceId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/presences/start:
    post:
      tags:
      - presence-controller
      operationId: startPresence
      parameters:
      - name: personId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/persons/:
    get:
      tags:
      - person-controller
      operationId: indexPersons
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
    post:
      tags:
      - person-controller
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Person'
  /api/achievements/:
    post:
      tags:
      - achievement-controller
      operationId: save
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Achievement'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Achievement'
  /api/presences:
    get:
      tags:
      - presence-controller
      operationId: all
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Presence'
  /api/presences/{personId}:
    get:
      tags:
      - presence-controller
      operationId: allByPerson
      parameters:
      - name: personId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Presence'
  /api/persons/{personId}:
    get:
      tags:
      - person-controller
      operationId: getPerson
      parameters:
      - name: personId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Person'
    delete:
      tags:
      - person-controller
      operationId: deletePerson
      parameters:
      - name: personId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/achievements/{achievementId}:
    get:
      tags:
      - achievement-controller
      operationId: get
      parameters:
      - name: achievementId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Achievement'
    delete:
      tags:
      - achievement-controller
      operationId: delete
      parameters:
      - name: achievementId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/achievements/byPerson/{personId}:
    get:
      tags:
      - achievement-controller
      operationId: getAllByPersonId
      parameters:
      - name: personId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Achievement'
  /api/achievements/all:
    get:
      tags:
      - achievement-controller
      operationId: getAll
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Achievement'
components:
  schemas:
    Person:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstname:
          type: string
        lastname:
          type: string
        status:
          type: string
          enum:
          - ILL
          - RETIRED
          - ACTIVE
        lifeguard:
          type: string
          enum:
          - NONE
          - JUNIOR
          - BRONZE
          - SILVER
          - GOLD
        lifeguardFrom:
          type: string
          format: date
        fitness:
          type: string
          format: date
    Achievement:
      required:
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        date:
          type: string
          format: date-time
        description:
          type: string
        image:
          type: string
        person:
          $ref: '#/components/schemas/Person'
    Place:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Presence:
      type: object
      properties:
        id:
          type: integer
          format: int64
        person:
          $ref: '#/components/schemas/Person'
        place:
          $ref: '#/components/schemas/Place'
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
