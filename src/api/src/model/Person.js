/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Person model module.
 * @module model/Person
 * @version v0
 */
class Person {
    /**
     * Constructs a new <code>Person</code>.
     * @alias module:model/Person
     */
    constructor() { 
        
        Person.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Person</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Person} obj Optional instance to populate.
     * @return {module:model/Person} The populated <code>Person</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Person();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('firstname')) {
                obj['firstname'] = ApiClient.convertToType(data['firstname'], 'String');
            }
            if (data.hasOwnProperty('lastname')) {
                obj['lastname'] = ApiClient.convertToType(data['lastname'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('lifeguard')) {
                obj['lifeguard'] = ApiClient.convertToType(data['lifeguard'], 'String');
            }
            if (data.hasOwnProperty('lifeguardFrom')) {
                obj['lifeguardFrom'] = ApiClient.convertToType(data['lifeguardFrom'], 'Date');
            }
            if (data.hasOwnProperty('fitness')) {
                obj['fitness'] = ApiClient.convertToType(data['fitness'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Person</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Person</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['firstname'] && !(typeof data['firstname'] === 'string' || data['firstname'] instanceof String)) {
            throw new Error("Expected the field `firstname` to be a primitive type in the JSON string but got " + data['firstname']);
        }
        // ensure the json data is a string
        if (data['lastname'] && !(typeof data['lastname'] === 'string' || data['lastname'] instanceof String)) {
            throw new Error("Expected the field `lastname` to be a primitive type in the JSON string but got " + data['lastname']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['lifeguard'] && !(typeof data['lifeguard'] === 'string' || data['lifeguard'] instanceof String)) {
            throw new Error("Expected the field `lifeguard` to be a primitive type in the JSON string but got " + data['lifeguard']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
Person.prototype['id'] = undefined;

/**
 * @member {String} firstname
 */
Person.prototype['firstname'] = undefined;

/**
 * @member {String} lastname
 */
Person.prototype['lastname'] = undefined;

/**
 * @member {module:model/Person.StatusEnum} status
 */
Person.prototype['status'] = undefined;

/**
 * @member {module:model/Person.LifeguardEnum} lifeguard
 */
Person.prototype['lifeguard'] = undefined;

/**
 * @member {Date} lifeguardFrom
 */
Person.prototype['lifeguardFrom'] = undefined;

/**
 * @member {Date} fitness
 */
Person.prototype['fitness'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Person['StatusEnum'] = {

    /**
     * value: "ILL"
     * @const
     */
    "ILL": "ILL",

    /**
     * value: "RETIRED"
     * @const
     */
    "RETIRED": "RETIRED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE"
};


/**
 * Allowed values for the <code>lifeguard</code> property.
 * @enum {String}
 * @readonly
 */
Person['LifeguardEnum'] = {

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "JUNIOR"
     * @const
     */
    "JUNIOR": "JUNIOR",

    /**
     * value: "BRONZE"
     * @const
     */
    "BRONZE": "BRONZE",

    /**
     * value: "SILVER"
     * @const
     */
    "SILVER": "SILVER",

    /**
     * value: "GOLD"
     * @const
     */
    "GOLD": "GOLD"
};



export default Person;

