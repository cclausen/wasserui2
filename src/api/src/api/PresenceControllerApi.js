/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Presence from '../model/Presence';

/**
* PresenceController service.
* @module api/PresenceControllerApi
* @version v0
*/
export default class PresenceControllerApi {

    /**
    * Constructs a new PresenceControllerApi. 
    * @alias module:api/PresenceControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the all operation.
     * @callback module:api/PresenceControllerApi~allCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Presence>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/PresenceControllerApi~allCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Presence>}
     */
    all(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Presence];
      return this.apiClient.callApi(
        '/api/presences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the allByPerson operation.
     * @callback module:api/PresenceControllerApi~allByPersonCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Presence>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} personId 
     * @param {module:api/PresenceControllerApi~allByPersonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Presence>}
     */
    allByPerson(personId, callback) {
      let postBody = null;
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling allByPerson");
      }

      let pathParams = {
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Presence];
      return this.apiClient.callApi(
        '/api/presences/{personId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startPresence operation.
     * @callback module:api/PresenceControllerApi~startPresenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} personId 
     * @param {module:api/PresenceControllerApi~startPresenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    startPresence(personId, callback) {
      let postBody = null;
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling startPresence");
      }

      let pathParams = {
      };
      let queryParams = {
        'personId': personId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/presences/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPresence operation.
     * @callback module:api/PresenceControllerApi~stopPresenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} presenceId 
     * @param {module:api/PresenceControllerApi~stopPresenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopPresence(presenceId, callback) {
      let postBody = null;
      // verify the required parameter 'presenceId' is set
      if (presenceId === undefined || presenceId === null) {
        throw new Error("Missing the required parameter 'presenceId' when calling stopPresence");
      }

      let pathParams = {
      };
      let queryParams = {
        'presenceId': presenceId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/presences/stopById', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPresenceByUser operation.
     * @callback module:api/PresenceControllerApi~stopPresenceByUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} personId 
     * @param {module:api/PresenceControllerApi~stopPresenceByUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopPresenceByUser(personId, callback) {
      let postBody = null;
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling stopPresenceByUser");
      }

      let pathParams = {
      };
      let queryParams = {
        'personId': personId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/presences/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPresenceByUser1 operation.
     * @callback module:api/PresenceControllerApi~stopPresenceByUser1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} personId 
     * @param {Number} placeId 
     * @param {module:api/PresenceControllerApi~stopPresenceByUser1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    stopPresenceByUser1(personId, placeId, callback) {
      let postBody = null;
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling stopPresenceByUser1");
      }
      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling stopPresenceByUser1");
      }

      let pathParams = {
      };
      let queryParams = {
        'personId': personId,
        'placeId': placeId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/presences/stopHere', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
