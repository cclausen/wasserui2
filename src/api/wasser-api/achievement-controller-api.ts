/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Achievement } from '../wasser-model';
/**
 * AchievementControllerApi - axios parameter creator
 * @export
 */
export const AchievementControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} achievementId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (achievementId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'achievementId' is not null or undefined
            assertParamExists('_delete', 'achievementId', achievementId)
            const localVarPath = `/api/achievements/{achievementId}`
                .replace(`{${"achievementId"}}`, encodeURIComponent(String(achievementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} achievementId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (achievementId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'achievementId' is not null or undefined
            assertParamExists('get', 'achievementId', achievementId)
            const localVarPath = `/api/achievements/{achievementId}`
                .replace(`{${"achievementId"}}`, encodeURIComponent(String(achievementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/achievements/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByPersonId: async (personId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getAllByPersonId', 'personId', personId)
            const localVarPath = `/api/achievements/byPerson/{personId}`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Achievement} achievement 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save: async (achievement: Achievement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'achievement' is not null or undefined
            assertParamExists('save', 'achievement', achievement)
            const localVarPath = `/api/achievements/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(achievement, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AchievementControllerApi - functional programming interface
 * @export
 */
export const AchievementControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AchievementControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} achievementId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(achievementId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(achievementId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} achievementId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(achievementId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Achievement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(achievementId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Achievement>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllByPersonId(personId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Achievement>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllByPersonId(personId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Achievement} achievement 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async save(achievement: Achievement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Achievement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.save(achievement, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AchievementControllerApi - factory interface
 * @export
 */
export const AchievementControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AchievementControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} achievementId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(achievementId: number, options?: any): AxiosPromise<void> {
            return localVarFp._delete(achievementId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} achievementId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(achievementId: number, options?: any): AxiosPromise<Achievement> {
            return localVarFp.get(achievementId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options?: any): AxiosPromise<Array<Achievement>> {
            return localVarFp.getAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByPersonId(personId: number, options?: any): AxiosPromise<Array<Achievement>> {
            return localVarFp.getAllByPersonId(personId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Achievement} achievement 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save(achievement: Achievement, options?: any): AxiosPromise<Achievement> {
            return localVarFp.save(achievement, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AchievementControllerApi - interface
 * @export
 * @interface AchievementControllerApi
 */
export interface AchievementControllerApiInterface {
    /**
     * 
     * @param {number} achievementId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AchievementControllerApiInterface
     */
    _delete(achievementId: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} achievementId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AchievementControllerApiInterface
     */
    get(achievementId: number, options?: AxiosRequestConfig): AxiosPromise<Achievement>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AchievementControllerApiInterface
     */
    getAll(options?: AxiosRequestConfig): AxiosPromise<Array<Achievement>>;

    /**
     * 
     * @param {number} personId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AchievementControllerApiInterface
     */
    getAllByPersonId(personId: number, options?: AxiosRequestConfig): AxiosPromise<Array<Achievement>>;

    /**
     * 
     * @param {Achievement} achievement 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AchievementControllerApiInterface
     */
    save(achievement: Achievement, options?: AxiosRequestConfig): AxiosPromise<Achievement>;

}

/**
 * AchievementControllerApi - object-oriented interface
 * @export
 * @class AchievementControllerApi
 * @extends {BaseAPI}
 */
export class AchievementControllerApi extends BaseAPI implements AchievementControllerApiInterface {
    /**
     * 
     * @param {number} achievementId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AchievementControllerApi
     */
    public _delete(achievementId: number, options?: AxiosRequestConfig) {
        return AchievementControllerApiFp(this.configuration)._delete(achievementId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} achievementId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AchievementControllerApi
     */
    public get(achievementId: number, options?: AxiosRequestConfig) {
        return AchievementControllerApiFp(this.configuration).get(achievementId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AchievementControllerApi
     */
    public getAll(options?: AxiosRequestConfig) {
        return AchievementControllerApiFp(this.configuration).getAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} personId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AchievementControllerApi
     */
    public getAllByPersonId(personId: number, options?: AxiosRequestConfig) {
        return AchievementControllerApiFp(this.configuration).getAllByPersonId(personId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Achievement} achievement 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AchievementControllerApi
     */
    public save(achievement: Achievement, options?: AxiosRequestConfig) {
        return AchievementControllerApiFp(this.configuration).save(achievement, options).then((request) => request(this.axios, this.basePath));
    }
}
