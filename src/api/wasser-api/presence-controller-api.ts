/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Presence } from '../wasser-model';
/**
 * PresenceControllerApi - axios parameter creator
 * @export
 */
export const PresenceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        all: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/presences`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allByPerson: async (personId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('allByPerson', 'personId', personId)
            const localVarPath = `/api/presences/{personId}`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startPresence: async (personId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('startPresence', 'personId', personId)
            const localVarPath = `/api/presences/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (personId !== undefined) {
                localVarQueryParameter['personId'] = personId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} presenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopPresence: async (presenceId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'presenceId' is not null or undefined
            assertParamExists('stopPresence', 'presenceId', presenceId)
            const localVarPath = `/api/presences/stopById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (presenceId !== undefined) {
                localVarQueryParameter['presenceId'] = presenceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopPresenceByUser: async (personId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('stopPresenceByUser', 'personId', personId)
            const localVarPath = `/api/presences/stop`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (personId !== undefined) {
                localVarQueryParameter['personId'] = personId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} personId 
         * @param {number} placeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopPresenceByUser1: async (personId: number, placeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('stopPresenceByUser1', 'personId', personId)
            // verify required parameter 'placeId' is not null or undefined
            assertParamExists('stopPresenceByUser1', 'placeId', placeId)
            const localVarPath = `/api/presences/stopHere`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (personId !== undefined) {
                localVarQueryParameter['personId'] = personId;
            }

            if (placeId !== undefined) {
                localVarQueryParameter['placeId'] = placeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PresenceControllerApi - functional programming interface
 * @export
 */
export const PresenceControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PresenceControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async all(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Presence>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.all(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allByPerson(personId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Presence>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allByPerson(personId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startPresence(personId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startPresence(personId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} presenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopPresence(presenceId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopPresence(presenceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopPresenceByUser(personId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopPresenceByUser(personId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} personId 
         * @param {number} placeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopPresenceByUser1(personId: number, placeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopPresenceByUser1(personId, placeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PresenceControllerApi - factory interface
 * @export
 */
export const PresenceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PresenceControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        all(options?: any): AxiosPromise<Array<Presence>> {
            return localVarFp.all(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allByPerson(personId: number, options?: any): AxiosPromise<Array<Presence>> {
            return localVarFp.allByPerson(personId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startPresence(personId: number, options?: any): AxiosPromise<void> {
            return localVarFp.startPresence(personId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} presenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopPresence(presenceId: number, options?: any): AxiosPromise<void> {
            return localVarFp.stopPresence(presenceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopPresenceByUser(personId: number, options?: any): AxiosPromise<void> {
            return localVarFp.stopPresenceByUser(personId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} personId 
         * @param {number} placeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopPresenceByUser1(personId: number, placeId: number, options?: any): AxiosPromise<void> {
            return localVarFp.stopPresenceByUser1(personId, placeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PresenceControllerApi - interface
 * @export
 * @interface PresenceControllerApi
 */
export interface PresenceControllerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PresenceControllerApiInterface
     */
    all(options?: AxiosRequestConfig): AxiosPromise<Array<Presence>>;

    /**
     * 
     * @param {number} personId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PresenceControllerApiInterface
     */
    allByPerson(personId: number, options?: AxiosRequestConfig): AxiosPromise<Array<Presence>>;

    /**
     * 
     * @param {number} personId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PresenceControllerApiInterface
     */
    startPresence(personId: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} presenceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PresenceControllerApiInterface
     */
    stopPresence(presenceId: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} personId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PresenceControllerApiInterface
     */
    stopPresenceByUser(personId: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} personId 
     * @param {number} placeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PresenceControllerApiInterface
     */
    stopPresenceByUser1(personId: number, placeId: number, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * PresenceControllerApi - object-oriented interface
 * @export
 * @class PresenceControllerApi
 * @extends {BaseAPI}
 */
export class PresenceControllerApi extends BaseAPI implements PresenceControllerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PresenceControllerApi
     */
    public all(options?: AxiosRequestConfig) {
        return PresenceControllerApiFp(this.configuration).all(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} personId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PresenceControllerApi
     */
    public allByPerson(personId: number, options?: AxiosRequestConfig) {
        return PresenceControllerApiFp(this.configuration).allByPerson(personId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} personId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PresenceControllerApi
     */
    public startPresence(personId: number, options?: AxiosRequestConfig) {
        return PresenceControllerApiFp(this.configuration).startPresence(personId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} presenceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PresenceControllerApi
     */
    public stopPresence(presenceId: number, options?: AxiosRequestConfig) {
        return PresenceControllerApiFp(this.configuration).stopPresence(presenceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} personId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PresenceControllerApi
     */
    public stopPresenceByUser(personId: number, options?: AxiosRequestConfig) {
        return PresenceControllerApiFp(this.configuration).stopPresenceByUser(personId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} personId 
     * @param {number} placeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PresenceControllerApi
     */
    public stopPresenceByUser1(personId: number, placeId: number, options?: AxiosRequestConfig) {
        return PresenceControllerApiFp(this.configuration).stopPresenceByUser1(personId, placeId, options).then((request) => request(this.axios, this.basePath));
    }
}
